/*
 * Copyright 2015 Enamul.
 *
 * Most of my softwares are open for educational purpose, but some are 
 * confidential. So, before using it openly drop me some lines at
 *
 *      enamsustcse@gmail.com
 *
 * I do not guarantee that the software would work properly. There could
 * remain bugs. If you found any of them, kindly report me.
 * If you need to use this or some part of it, use it at your own risk.
 * This software is not a professionally developed, so commercial use 
 * is not approved by default.
 */
package contest;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import static javax.swing.JOptionPane.YES_OPTION;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Enamul
 */
public class ContestSetting extends javax.swing.JFrame {

    NewContest upperClass;
    File saveFile;
    DefaultTableModel model;
    Contest contest;
    boolean startup;

    /**
     * Creates new form ContestSetting
     */
    public ContestSetting(NewContest upper, Contest contest, String filePath, boolean configured) {
        super("Contest Problems");
        initComponents();
        startup = false;
        this.upperClass = upper;
        this.saveFile = new File(filePath);
        for (int i = 1; i < 50; i++) {
            jComboBoxNoOfProblem.addItem(i);
        }
        this.contest = contest;
        if (configured) {
            loadValues();
        }

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                upperClass.setVisible(true);
                setVisible(false);
            }
        });

        //adjust screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth();
        double height = screenSize.getHeight();
        setLocation((int) Math.max((width - getWidth()) / 2, 0), (int) Math.max((height - getHeight()) / 2, 0));

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    void loadValues() {
        jComboBoxNoOfProblem.setSelectedItem(contest.numberOfProblems);
        int row = contest.numberOfProblems;
        model = (DefaultTableModel) jTableProblems.getModel();
        model.setRowCount(row);
        for (int i = 0; i < row; i++) {
            model.setValueAt(i + 1, i, 0);
//            System.out.println(this.contest.problems+" now :"+i);
            model.setValueAt(this.contest.problems[i].problemName, i, 1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxNoOfProblem = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProblems = new javax.swing.JTable();
        jButtonConfigureProblem = new javax.swing.JButton();
        jButtonSaveAndExit = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jButtonBrowse = new javax.swing.JButton();
        jTextFieldFilePath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldFileLoad = new javax.swing.JTextField();
        jButtonBrowseLoad = new javax.swing.JButton();
        jButtonLoad = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Number of Problems: ");

        jComboBoxNoOfProblem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxNoOfProblemItemStateChanged(evt);
            }
        });
        jComboBoxNoOfProblem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNoOfProblemActionPerformed(evt);
            }
        });

        jTableProblems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Problem Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableProblems);

        jButtonConfigureProblem.setText("Configure This Problem");
        jButtonConfigureProblem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfigureProblemActionPerformed(evt);
            }
        });

        jButtonSaveAndExit.setText("Save and Back");
        jButtonSaveAndExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAndExitActionPerformed(evt);
            }
        });

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonBrowse.setText("Browse");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        jLabel1.setText("Save As Text:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxNoOfProblem, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBrowse))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jButtonConfigureProblem)
                    .addGap(50, 50, 50)
                    .addComponent(jButtonSaveAndExit)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                    .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxNoOfProblem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConfigureProblem)
                    .addComponent(jButtonSaveAndExit)
                    .addComponent(jButtonExit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("Load From File:");

        jButtonBrowseLoad.setText("Browse");
        jButtonBrowseLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseLoadActionPerformed(evt);
            }
        });

        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFileLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBrowseLoad))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(174, 174, 174)
                                .addComponent(jButtonLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldFileLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLoad)
                .addGap(7, 7, 7)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxNoOfProblemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNoOfProblemActionPerformed
        // TODO add your handling code here:

        if (this.contest == null) {
            return;
        }
        if (this.contest.numberOfProblems != 0 && startup) {
            int feedback = JOptionPane.showConfirmDialog(this, "All Previous Data Would Be Lost\nDo You Want To Continue?", "Confirmation", YES_NO_OPTION);
            if (feedback != YES_OPTION) {
                return;
            }
        }
        startup = true;

        int row = (int) jComboBoxNoOfProblem.getSelectedItem();
        model = (DefaultTableModel) jTableProblems.getModel();
        model.setRowCount(row);
        for (int i = 0; i < row; i++) {
            model.setValueAt(i + 1, i, 0);
            model.setValueAt("", i, 1);
        }
        System.out.println("It comes here: "+row);
        this.contest.numberOfProblems = row;
        this.contest.problems = new Problem[row];
        this.contest.submissions = new Vector();
        this.contest.accepted = new boolean[row];
    }//GEN-LAST:event_jComboBoxNoOfProblemActionPerformed

    private void jButtonConfigureProblemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfigureProblemActionPerformed
        // TODO add your handling code here:
        int currentRow = jTableProblems.getSelectedRow();
        if (currentRow == -1) {
            return;
        }
        if (this.contest.problems[currentRow] == null) {
            this.contest.problems[currentRow] = new Problem();
            this.contest.accepted[currentRow] = false;
        }
        this.contest.problems[currentRow].problemNo = currentRow + 1;
        new ConfigureProblem(this, this.contest.problems[currentRow]).setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButtonConfigureProblemActionPerformed

    void saveAsText() {
        FileWriter writer = null;
        try {
            File toWrite = new File(jTextFieldFilePath.getText());
            writer = new FileWriter(toWrite);

            writer.write(String.format("%d\n", contest.numberOfProblems));
            for (int i = 0; i < contest.numberOfProblems; i++) {
                writer.write(String.format("%s\n", contest.problems[i].problemName));
                if (contest.problems[i].oneFile) {
                    writer.write(String.format("%s\n", "SingleFile"));
                    writer.write(String.format("%s\n", contest.problems[i].inputFile.toString()));
                    writer.write(String.format("%s\n", contest.problems[i].outputFile.toString()));
                } else {
                    writer.write(String.format("%s\n", "MultipleFile"));
                    writer.write(String.format("%s\n", contest.problems[i].folderPath.toString()));
                    writer.write(String.format("%s\n", contest.problems[i].inputExtension));
                    writer.write(String.format("%s\n", contest.problems[i].outputExtension));
                }

                writer.write(String.format("%s\n", contest.problems[i].dataType));
                if (contest.problems[i].dataType.equalsIgnoreCase("DOUBLE")) {
                    writer.write(String.format("%d\n", contest.problems[i].precision));
                }
                writer.write(String.format("%d\n", contest.problems[i].timeLimit));
            }

        } catch (IOException ex) {
            Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void jButtonSaveAndExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveAndExitActionPerformed
        if (!jTextFieldFilePath.getText().equals("")) {
            saveAsText();
        }
        try {
            // TODO add your handling code here:
            FileOutputStream fout = new FileOutputStream(saveFile);
            ObjectOutputStream oos = new ObjectOutputStream(fout);
            oos.writeObject(contest);
            oos.flush();
            setVisible(false);
            upperClass.upperClass.upperClass.setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSaveAndExitActionPerformed

    private void jComboBoxNoOfProblemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxNoOfProblemItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxNoOfProblemItemStateChanged

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        // TODO add your handling code here:
        int retrival;
        retrival = jFileChooser.showSaveDialog(this);

        if (retrival == JFileChooser.APPROVE_OPTION) {
            try {
                File fileName = jFileChooser.getSelectedFile();
                jTextFieldFilePath.setText(fileName.toString());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jButtonBrowseLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseLoadActionPerformed
        // TODO add your handling code here:
        int retrival;
        retrival = jFileChooser.showOpenDialog(this);

        if (retrival == JFileChooser.APPROVE_OPTION) {
            try {
                File fileName = jFileChooser.getSelectedFile();
                jTextFieldFileLoad.setText(fileName.toString());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonBrowseLoadActionPerformed

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        BufferedReader reader = null;
        try {
            // TODO add your handling code here:
            File toRead = new File(jTextFieldFileLoad.getText());
            reader = new BufferedReader(new FileReader(toRead));
            String now = reader.readLine();
            int noOfProblem = Integer.parseInt(now);
            jComboBoxNoOfProblem.setSelectedItem(noOfProblem);
            
            
            
            for (int i = 0; i < noOfProblem; i++) {
                this.contest.problems[i] = new Problem();
                this.contest.accepted[i] = false;
                this.contest.problems[i].problemNo = i+1;
                now = reader.readLine();
                this.contest.problems[i].problemName = now;
                
                setProblemName(i+1, now);
                
                now = reader.readLine();
                
                if(now.equalsIgnoreCase("MULTIPLEFILE")){
                    this.contest.problems[i].oneFile = false;
                    
                    now = reader.readLine();
                    this.contest.problems[i].folderPath = new File(now);
                    
                    now = reader.readLine();
                    this.contest.problems[i].inputExtension = now;
                    
                    now = reader.readLine();
                    this.contest.problems[i].outputExtension = now;
                }
                else{
                    this.contest.problems[i].oneFile = true;
                    
                    now = reader.readLine();
                    this.contest.problems[i].inputFile = new File(now);
                    
                    now = reader.readLine();
                    this.contest.problems[i].outputFile = new File(now);
                }
                
                                    
                now = reader.readLine();
                this.contest.problems[i].dataType = now;
                
                if(now.equalsIgnoreCase("DOUBLE")){
                    now = reader.readLine();
                    this.contest.problems[i].precision = Integer.parseInt(now);
                }
                                    
                now = reader.readLine();
                this.contest.problems[i].timeLimit = Integer.parseInt(now);
                
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    public void setProblemName(int id, String problemName) {
        jTableProblems.getModel().setValueAt(problemName, id - 1, 1);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContestSetting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContestSetting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContestSetting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContestSetting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new ContestSetting().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonBrowseLoad;
    private javax.swing.JButton jButtonConfigureProblem;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSaveAndExit;
    private javax.swing.JComboBox jComboBoxNoOfProblem;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableProblems;
    private javax.swing.JTextField jTextFieldFileLoad;
    private javax.swing.JTextField jTextFieldFilePath;
    // End of variables declaration//GEN-END:variables
}
