/*
 * Copyright 2015 Enamul.
 *
 * Most of my softwares are open for educational purpose, but some are 
 * confidential. So, before using it openly drop me some lines at
 *
 *      enamsustcse@gmail.com
 *
 * I do not guarantee that the software would work properly. There could
 * remain bugs. If you found any of them, kindly report me.
 * If you need to use this or some part of it, use it at your own risk.
 * This software is not a professionally developed, so commercial use 
 * is not approved by default.
 */
package contest;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Random;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.FILES_ONLY;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.NO_OPTION;
import static javax.swing.JOptionPane.YES_OPTION;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;

/**
 * This class define the list of contestants who would get the permission to
 * attend in this contest.
 *
 * @since 1.0
 * @version 1.0
 * @author Enamul
 */
public class ConfigureContestants extends javax.swing.JDialog {

    JFrame upperClass;
    HashMap<String, String> contestants;
    DefaultTableModel model;//contestants with password
    private int passLength = 6;

    /**
     * Creates new form ConfigureContestants to Set the contestants setting.
     *
     * @param upperClass instance of the parent class
     * @param contestants list of existing contestants
     */
    public ConfigureContestants(JFrame upperClass, HashMap<String, String> contestants) {
        super(upperClass,"Contestant Setting");
        initComponents();
        this.upperClass = upperClass;
        this.contestants = contestants;

        loadContestants();

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                upperClass.setVisible(true);
                setVisible(false);
            }
        });

        //adjust screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth();
        double height = screenSize.getHeight();
        setLocation((int) Math.max((width - getWidth()) / 2, 0), (int) Math.max((height - getHeight()) / 2, 0));

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * Loads the contestants setting to the table.
     */
    void loadContestants() {
        model = (DefaultTableModel) jTableContestants.getModel();
        int row = contestants.size();
        model.setRowCount(row);
        if (contestants.isEmpty()) {
            return;
        }
        Object keys[] =  contestants.keySet().toArray();
        for (int i = 0; i < row; i++) {
            model.setValueAt(keys[i], i, 0);
            model.setValueAt(contestants.get((String)keys[i]), i, 1);
        }
        //contestants.setSize(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jTextFieldLoadContestantsFile = new javax.swing.JTextField();
        jLabelContestantList = new javax.swing.JLabel();
        jButtonBrowseLoadContestants = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonLoadContestantList = new javax.swing.JButton();
        jButtonLoadContestantListWithPass = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableContestants = new javax.swing.JTable();
        jButtonLoadAndBack = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jButtonGenPass = new javax.swing.JButton();
        jTextFieldSaveContestantsFile = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButtonBrowseStoreContestants = new javax.swing.JButton();
        jButtonClearContestants = new javax.swing.JButton();
        jButtonRemoveSelected = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        jTextFieldLoadContestantsFile.setText("C:\\Users\\Enamul\\Desktop\\Contest\\Contestants.txt");

        jLabelContestantList.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelContestantList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelContestantList.setText("Contestant List");

        jButtonBrowseLoadContestants.setText("Browse");
        jButtonBrowseLoadContestants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseLoadContestantsActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Load Contestant List:");

        jButtonLoadContestantList.setText("Load Contestant List");
        jButtonLoadContestantList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadContestantListActionPerformed(evt);
            }
        });

        jButtonLoadContestantListWithPass.setText("Load Contestant List with Passwords");
        jButtonLoadContestantListWithPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadContestantListWithPassActionPerformed(evt);
            }
        });

        jTableContestants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Contestant", "Password"
            }
        ));
        jScrollPane1.setViewportView(jTableContestants);

        jButtonLoadAndBack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonLoadAndBack.setText("Load and Back");
        jButtonLoadAndBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadAndBackActionPerformed(evt);
            }
        });

        jButtonExit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonGenPass.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonGenPass.setText("Generate Random Passwords");
        jButtonGenPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenPassActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Save Contestant List:");

        jButtonBrowseStoreContestants.setText("Browse");
        jButtonBrowseStoreContestants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseStoreContestantsActionPerformed(evt);
            }
        });

        jButtonClearContestants.setText("Clear Contestant List");
        jButtonClearContestants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearContestantsActionPerformed(evt);
            }
        });

        jButtonRemoveSelected.setText("Remove Selected Contestants");
        jButtonRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveSelectedActionPerformed(evt);
            }
        });

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelContestantList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldLoadContestantsFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBrowseLoadContestants))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonGenPass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoadAndBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonExit))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldSaveContestantsFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBrowseStoreContestants))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonRemoveSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonClearContestants))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonLoadContestantList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonLoadContestantListWithPass)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelContestantList)
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldLoadContestantsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseLoadContestants))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLoadContestantList)
                    .addComponent(jButtonLoadContestantListWithPass))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRemoveSelected)
                    .addComponent(jButtonClearContestants)
                    .addComponent(jButton1))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSaveContestantsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseStoreContestants))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLoadAndBack)
                    .addComponent(jButtonExit)
                    .addComponent(jButtonGenPass))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Opens a file chooser to choose a file from where the contestants
     * information would be imported.
     *
     * @param evt action event of clicking on Browse button to Load Contestants
     * List
     */
    private void jButtonBrowseLoadContestantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseLoadContestantsActionPerformed
        // TODO add your handling code here:
        int retrival;
        jFileChooser.setFileSelectionMode(FILES_ONLY);
        retrival = jFileChooser.showOpenDialog(this);

        if (retrival == JFileChooser.APPROVE_OPTION) {
            try {
                File fileName = jFileChooser.getSelectedFile();
                jTextFieldLoadContestantsFile.setText(fileName.toString());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonBrowseLoadContestantsActionPerformed
    /**
     * discards all changes and directly close the whole program.
     *
     * @param evt action event of clicking on exit button
     */
    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(this, "Are You Sure To Exit?\nAll unsaved data would be lost!", "Confirmation!", JOptionPane.INFORMATION_MESSAGE);
        if(response != YES_OPTION) return;
        System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    /**
     * Makes the contestant list empty.
     *
     * @param evt action event of clicking Clear contestant list
     */
    private void jButtonClearContestantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearContestantsActionPerformed
        // TODO add your handling code here:
        model.setRowCount(0);
    }//GEN-LAST:event_jButtonClearContestantsActionPerformed

    /**
     * Alternate way of exiting.
     *
     * @see private void jButtonExitActionPerformed(java.awt.event.ActionEvent
     * evt);
     * @param evt action event of choosing Menu Item Exit.
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        jButtonExitActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * Opens a file chooser to choose a file where the contestants information
     * would be exported.
     *
     * @param evt action event of clicking on Browse button to Store Contestants
     * List
     */
    private void jButtonBrowseStoreContestantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseStoreContestantsActionPerformed
        // TODO add your handling code here:
        int retrival;
        jFileChooser.setFileSelectionMode(FILES_ONLY);
        retrival = jFileChooser.showSaveDialog(this);

        if (retrival == JFileChooser.APPROVE_OPTION) {
            try {
                File fileName = jFileChooser.getSelectedFile();
                jTextFieldSaveContestantsFile.setText(fileName.toString());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonBrowseStoreContestantsActionPerformed
    /**
     * Removes selected contestants from table. Generally, User clicks on rows
     * having CTRL key pressed.
     *
     * @param evt action event of clicking Remove Selected Contestants
     */
    private void jButtonRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveSelectedActionPerformed
        // TODO add your handling code here:
        int[] selectedIndex = jTableContestants.getSelectedRows();
        for (int t : selectedIndex) {
            model.removeRow(t - 1);
        }
    }//GEN-LAST:event_jButtonRemoveSelectedActionPerformed

    /**
     * Loads the contestants handles from file. Asks user whether to append or
     * to overwrite the existing list.
     *
     * @param evt action event of clicking Load Contestant List
     */
    private void jButtonLoadContestantListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadContestantListActionPerformed
        // TODO add your handling code here:

        if (jTextFieldLoadContestantsFile.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Oops!\nYou forgot to select the specification file.", "File Not Selected!", ERROR_MESSAGE);
            return;
        }
        if (model.getRowCount()!=0) {
            int feedback = JOptionPane.showConfirmDialog(this, "Are you want to append the contestant List?\nIf yes, then click YES, otherwise click NO", "Contestant List Appending!", ERROR_MESSAGE);

            if (feedback == NO_OPTION) {
                model.setRowCount(0);
            }
        }

        BufferedReader reader = null;
        try {
            // TODO add your handling code here:
            File toRead = new File(jTextFieldLoadContestantsFile.getText());
            reader = new BufferedReader(new FileReader(toRead));
            String now = reader.readLine();

            while (now != null) {
                if (!now.isEmpty()) {
                    Vector<String> users = new Vector();
                    users.add(now);
                    users.add("");
                    model.addRow(users);
                }
                now = reader.readLine();
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButtonLoadContestantListActionPerformed

    /**
     * Loads the contestants handles with password from file. Asks user whether
     * to append or to overwrite the existing list.
     *
     * @param evt action event of clicking Load Contestant List with Passwords
     */
    private void jButtonLoadContestantListWithPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadContestantListWithPassActionPerformed
        // TODO add your handling code here:
        if (jTextFieldLoadContestantsFile.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Oops!\nYou forgot to select the specification file.", "File Not Selected!", ERROR_MESSAGE);
            return;
        }

        int feedback = JOptionPane.showConfirmDialog(this, "Are you want to append the contestant List?\nIf yes, then click YES, otherwise click NO", "Contestant List Appending!", ERROR_MESSAGE);

        if (feedback == NO_OPTION) {
            model.setRowCount(0);
        }

        BufferedReader reader = null;
        try {
            // TODO add your handling code here:
            File toRead = new File(jTextFieldLoadContestantsFile.getText());
            reader = new BufferedReader(new FileReader(toRead));
            String now = reader.readLine();

            while (now != null) {
                if (!now.isEmpty()) {
                    String data[] = now.split(",");
                    model.addRow(data);
                }
                now = reader.readLine();
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(ContestSetting.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonLoadContestantListWithPassActionPerformed

    /**
     * Generates a numeric password of having length passLength.
     *
     * @return password string.
     */
    String genPass() {
        String ret = "";
        Random rand = new Random();

        for (int i = 0; i < passLength; i++) {
            ret += (char) (rand.nextInt(10) + (int) '0');
        }

        return ret;
    }

    /**
     * Generates and allocates passwords to the contestants who did not have
     * one.
     *
     * @param evt action event of clicking Generate Random Password button
     */
    private void jButtonGenPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenPassActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 1) == null || model.getValueAt(i, 1).equals("")) {
                model.setValueAt(genPass(), i, 1);
            }
        }
    }//GEN-LAST:event_jButtonGenPassActionPerformed

    /**
     * updates the contestant list in Contest object and store in a text file if
     * user wants.
     *
     * @param evt action event of clicking Load and Back.
     */
    private void jButtonLoadAndBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadAndBackActionPerformed
        // TODO add your handling code here:

        if (!jTextFieldSaveContestantsFile.getText().isEmpty()) {
            saveAsText();
        }

        contestants.clear();
        for (int i = 0; i < model.getRowCount(); i++) {
            contestants.put((String) model.getValueAt(i, 0), (String) model.getValueAt(i, 1));
        }
        upperClass.setVisible(true);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButtonLoadAndBackActionPerformed

    /**
     * Add a row in the table to add a new contestant.
     *
     * @param evt action event of clicking Add button
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String[] data = {"", ""};
        model.addRow(data);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Saves the contest specifications as text file.
     */
    void saveAsText() {
        FileWriter writer = null;
        try {
            File toWrite = new File(jTextFieldSaveContestantsFile.getText());
            writer = new FileWriter(toWrite);

            for (int i = 0; i < model.getRowCount(); i++) {
                writer.write(String.format("%s,%s\n", (String) model.getValueAt(i, 0), (String) model.getValueAt(i, 1)));
            }

        } catch (IOException ex) {
            Logger.getLogger(ConfigureContest.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(ConfigureContest.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ConfigureContestants.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ConfigureContestants.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ConfigureContestants.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ConfigureContestants.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ConfigureContestants().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonBrowseLoadContestants;
    private javax.swing.JButton jButtonBrowseStoreContestants;
    private javax.swing.JButton jButtonClearContestants;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonGenPass;
    private javax.swing.JButton jButtonLoadAndBack;
    private javax.swing.JButton jButtonLoadContestantList;
    private javax.swing.JButton jButtonLoadContestantListWithPass;
    private javax.swing.JButton jButtonRemoveSelected;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelContestantList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableContestants;
    private javax.swing.JTextField jTextFieldLoadContestantsFile;
    private javax.swing.JTextField jTextFieldSaveContestantsFile;
    // End of variables declaration//GEN-END:variables
}
